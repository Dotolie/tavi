//************************ Copyright(C) New Media Life Inc. ************************
//
// Description : Ext. LCD UI class 
// 
// $Source: /home/cvsroot/TAVI020/tavi/Task/ExtLCD.cpp,v $
// $Revision: 1.2 $
// $Date: 2006/03/09 01:55:35 $
// $Author: zstein $ Lee Seok<zstein@newmedialife.com>
//
//******************************************************************************
// $Log: ExtLCD.cpp,v $
// Revision 1.2  2006/03/09 01:55:35  zstein
// - improved displaying volume.
//
// Revision 1.1.1.1  2006/02/22 12:33:31  zstein
// TAVI020 REBUILD
//
// Revision 1.40  2006/02/07 09:03:45  zstein
// - fixed mismatch icons.
//
// Revision 1.39  2006/01/27 23:37:44  yong
// ChangeMode() SHOULD NOT record the previous mode if the one is SEEK or VOLUME
//
// Revision 1.38  2006/01/27 11:55:29  yong
// implement DrawSeek() as graphical one like DrawVolume()
//
// Revision 1.37  2006/01/27 06:46:42  zstein
// *** empty log message ***
//
// Revision 1.36  2006/01/26 06:02:13  zstein
// *** empty log message ***
//
// Revision 1.35  2006/01/24 13:27:57  ywkim
// Change function of DrawString() & DrawReady() for option of DT_NUMBER_8WIDTH
//
// Revision 1.34  2006/01/19 08:42:28  zstein
// *** empty log message ***
//
// Revision 1.33  2006/01/16 09:41:30  zstein
// -
//*******************************************************************************

#include <time.h>
#include <unistd.h>
#include <Lib/LibText.h>
#include "ExtLCD.h"
#include "tavi_global.h"
#include <Component/fbdev.h>
#include <Component/object.h>
#include <Component/CharSet.h>
#include <util.h>

extern CTextEngine_BDF* pT;

#define TEXT_X					18
#define TEXT_Y					4
#define TEXT_WIDTH				92
#define TEXT_HEIGHT				12

#define	MENU_COUNT				2
// BITMAP ICON
#define BATTERY_ICONS			6
#define BATTERY_ICON_WIDTH	17
#define BATTERY_ICON_HEIGHT	10
static char BatteryIcons[] = {
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
};

//header size: 14
//info size: 40
//width: 8, height: 94
//padding: 0
#define FRONT_ICONS				10
#define FRONT_ICON_WIDTH		8
#define FRONT_ICON_HEIGHT		9
static char Icons[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	1, 1, 1, 0, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 0, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	1, 0, 0, 0, 0, 1, 0, 1, 
	1, 1, 0, 0, 1, 1, 0, 1, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 0, 
	0, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 0, 1, 1, 0, 1, 0, 
	0, 1, 0, 1, 1, 0, 1, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 1, 1, 1, 1, 0, 1, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 1, 1, 1, 1, 0, 1, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0,
};

static char IconsNew[] = {
	// Play (0)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Pause (1)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Playlist (2)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Artist (3)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

       // Folder (4)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Album (5)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Genre (6)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// All tracks (7)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Sound (8)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// Radio Station (9)
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,

	// USB Icon (10)
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 

	// Help (11)
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 

};

#define	NUM_NEW_ICONS			12

#define MENU_TITLE_WIDTH		60
#define MENU_TITLE_HEIGHT		12

static char MusicMenuSelected[] = {
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
};

static char MusicMenuUnselected[] = {
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
};

static char RadioMenuSelected[] = {
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
};

static char RadioMenuUnselected[] = {
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
};

#define STARTUP_ICON_WIDTH	57
#define STARTUP_ICON_HEIGHT	10
static char StartupIcon[] = {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
};

#define AM_ICON_WIDTH		16
#define AM_ICON_HEIGHT		9
static char AMIcon[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
};

#define PM_ICON_WIDTH		16
#define PM_ICON_HEIGHT		9
static char PMIcon[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
};

//header size: 14
//info size: 40
//width: 9, height: 12
//padding: 3
#define SPIN_ICON_WIDTH	9
#define SPIN_ICON_HEIGHT	6
static char SpinIcon[] = {
	// UP
	0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 

	// DOWN
	0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

// 10 x 8
static char barThumb[] = {
	0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
	0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
	1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
	0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
};

// 16 x 14
static char speakerIcon[] = {
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
    1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
};  

static char searchIcon[] = {
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
        1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 
        1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 
        1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
        1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 
        1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 
        1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 
        0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
};

//#include "LCDFull2.h"
#include "MiscCtrl.h"
void SetListItem( const CListItem* pitem, int total )
{
    extern CMiscCtrl* g_MiscCtrl;
    extern CExtLCD* g_ExtLCD;
    
    if( 1 || g_MiscCtrl->FolderClosed() ) {
        if( 1 || g_ExtLCD->GetCurrentMode() != CExtLCD::EXT_STAGE_LIST ) {
            g_ExtLCD->SetListItem( pitem, total );
            g_ExtLCD->ChangeMode( CExtLCD::EXT_STAGE_LIST );
        }
        g_ExtLCD->Update();
    }
}

CExtLCD::CExtLCD( void )
{
	int xres = SubLCD_XResolution();
	int yres = SubLCD_YResolution();
	char* buf = SubLCD_GetPlaneBuffer( 0 );

	m_pmMainFrm  = new CPixmap;
	m_pmMainFrm->CreatePixmap( 
		xres, yres,
		8, buf, false );
	
	/* MENU IMAGES */
	m_pmMenu[0] = new CPixmap;
	m_pmMenu[0]->CreatePixmap( MENU_TITLE_WIDTH, MENU_TITLE_HEIGHT, 8, MusicMenuUnselected, false );

	m_pmMenu[1] = new CPixmap;
	m_pmMenu[1]->CreatePixmap( MENU_TITLE_WIDTH, MENU_TITLE_HEIGHT, 8, RadioMenuUnselected, false );

	m_pmMenu[2] = new CPixmap;
	m_pmMenu[2]->CreatePixmap( MENU_TITLE_WIDTH, MENU_TITLE_HEIGHT, 8, MusicMenuSelected, false );

	m_pmMenu[3] = new CPixmap;
	m_pmMenu[3]->CreatePixmap( MENU_TITLE_WIDTH, MENU_TITLE_HEIGHT, 8, RadioMenuSelected, false );

	//m_pmFullScreen = new CPixmap;
	//m_pmFullScreen->CreatePixmap( 128, 16, 8, LCDFull, false );

	m_pmBarThumb = new CPixmap;
	m_pmBarThumb->CreatePixmap( 10, 8, 8, barThumb, false );

	m_pmSpeaker = new CPixmap;
	m_pmSpeaker->CreatePixmap( 16, 14, 8, speakerIcon, false );

	m_pmSearch = new CPixmap;
	m_pmSearch->CreatePixmap( 16, 14, 8, searchIcon, false );

	m_pmPM = new CPixmap;
	m_pmPM->CreatePixmap(
		PM_ICON_WIDTH, PM_ICON_HEIGHT,
		8, PMIcon, false );

	m_pmAM = new CPixmap;
	m_pmAM->CreatePixmap(
		AM_ICON_WIDTH, AM_ICON_HEIGHT,
		8, AMIcon, false );

	int i;
	for( i=0; i<BATTERY_ICONS; i++ ) {
		m_pmBattery[i] = new CPixmap;
		m_pmBattery[i]->CreatePixmap( 
			BATTERY_ICON_WIDTH, BATTERY_ICON_HEIGHT,
			8, BatteryIcons+i*BATTERY_ICON_WIDTH*BATTERY_ICON_HEIGHT,
			false );
	}

	for( i=0; i<FRONT_ICONS; i++ ) {
		m_pmIcons[i] = new CPixmap;
		m_pmIcons[i]->CreatePixmap(
			FRONT_ICON_WIDTH, FRONT_ICON_HEIGHT,
			8, Icons+i*FRONT_ICON_WIDTH*FRONT_ICON_HEIGHT,
			false );
	}

	// XXX
	for ( i=0; i < NUM_NEW_ICONS; i ++ ) {
		m_pmIconsNew[i] = new CPixmap;
		m_pmIconsNew[i]->CreatePixmap( 16, 14, 8, IconsNew + i * 16 * 14, false );
	}

	for( i=0; i<2; i++ ) {
		m_pmSpin[i] = new CPixmap;
		m_pmSpin[i]->CreatePixmap(
			SPIN_ICON_WIDTH, SPIN_ICON_HEIGHT,
			8, SpinIcon+i*SPIN_ICON_WIDTH*SPIN_ICON_HEIGHT,
			false );
	}
	
	m_CurrentMenu		= EXT_MENU_MUSIC;
	m_nModeTime			= gettime_sec();
	m_LastMode			= EXT_STAGE_READY;
	m_CurrentMode		= EXT_STAGE_READY;
	m_ListItem.m_nIcon	= -1;
	m_ListItem.m_nIndex	= -1;
	m_ListItem.m_szText	= "";
	m_pmBuffer			= NULL;
	m_nPlayState		= EXT_LCD_PLAY;
	m_nMsgIcon			= -1;
	m_szMessage			= "None";
}

CExtLCD::~CExtLCD( void )
{
	int i;
	
	for( i=0; i < 4; i++ ) {
		if( m_pmMenu[i] ) delete m_pmMenu[i];
	}
	
	for( i=0; i<BATTERY_ICONS; i++ ) {
		if( m_pmBattery[i] ) delete m_pmBattery[i];
	}

	for( i=0; i<FRONT_ICONS; i++ ) {
		if( m_pmIcons[i] ) delete m_pmIcons[i];
	}

	for( i=0; i<2; i++ ) {
		if( m_pmSpin[i] ) delete m_pmSpin[i];
	}

	for ( i=0; i < NUM_NEW_ICONS; i ++ ) {
		if ( m_pmIconsNew[i] ) delete m_pmIconsNew[i];
	}
	
	if( m_pmPM ) delete m_pmPM;
	if( m_pmAM ) delete m_pmAM;
	if( m_pmBuffer ) delete m_pmBuffer;
	if( m_pmBarThumb ) delete m_pmBarThumb;
	if( m_pmSpeaker ) delete m_pmSpeaker;
	if( m_pmSearch ) delete m_pmSearch;
}

void CExtLCD::ChangeMode( ExtLCD_Mode mode )
{
	if (m_CurrentMode != EXT_STAGE_VOLUME && m_CurrentMode != EXT_STAGE_SEEK) {
		m_LastMode			= m_CurrentMode;
	}
	m_CurrentMode		= mode;
	m_nModeTime			= gettime_sec();
}

void CExtLCD::ChangeMenu( ExtLCD_Menu menu )
{
	m_CurrentMenu		= menu;
}

void CExtLCD::DrawMessage( void )
{
	CPixmap* pmFrontIcon = NULL;

	// draw front icon
	if (m_nMsgIcon != -1) {
		pmFrontIcon = this->getPixmap( m_nMsgIcon );
	}

	if( pmFrontIcon ) {
		op_BitBlt( m_pmMainFrm, 2, 2, pmFrontIcon, 0, 0, pmFrontIcon->m_nWidth, pmFrontIcon->m_nHeight );
		DrawString( m_szMessage, TEXT_X, TEXT_Y, m_pmMainFrm->m_nWidth-4, TEXT_HEIGHT );
	} else {
		DrawString( m_szMessage, 2, TEXT_Y, m_pmMainFrm->m_nWidth-4, TEXT_HEIGHT );
	}
}

CPixmap *CExtLCD::getPixmap(int idx)
{
	CPixmap *r = NULL;

	switch (idx) {

	case EXT_LCD_ICON_PLAY:
		idx = EXT_LCD_ICON_NEW_PLAY;
		break;
	case EXT_LCD_ICON_PAUSE:
		idx = EXT_LCD_ICON_NEW_PAUSE;
		break;
	case EXT_LCD_ICON_RADIO:
		idx = EXT_LCD_ICON_NEW_RADIO;
		break;
	case EXT_LCD_ICON_FOLDER:
		idx = EXT_LCD_ICON_NEW_FOLDER;
		break;
	case EXT_LCD_ICON_MUSIC:
		idx = EXT_LCD_ICON_NEW_MUSIC;
		break;

	}

	if (this->GetCurrentMenu() == EXT_MENU_RADIO && idx == EXT_LCD_ICON_NEW_PLAY) {
		// XXX dirty fix
		idx = EXT_LCD_ICON_NEW_RADIO;
	}

	if ( idx >= EXT_LCD_ICON_NEW_PLAY && idx <= EXT_LCD_ICON_NEW_HELP) {
		return m_pmIconsNew[idx - EXT_LCD_ICON_NEW_PLAY];
	}

	return m_pmIconsNew[EXT_LCD_ICON_NEW_MUSIC - EXT_LCD_ICON_NEW_PLAY];
	
}

void CExtLCD::DrawMenu( void )
{
	int nMargin = 1;
	int nSpace = 2;
	int nStartX=1;
	int nStartY=3;
	CPixmap pm, *p;

	int offset = m_pmMainFrm->m_nWidth - 2 * (m_pmMenu[0]->m_nWidth);
	offset /= 3;
	for( int i=0; i < MENU_COUNT; i++ ) {
		if( m_CurrentMenu == i ) {
			p = m_pmMenu[i + 2];	// Selected Icon index is 2 in distance
		} else {
			p = m_pmMenu[i];
		}
		op_BitBlt( m_pmMainFrm, nStartX+offset, nStartY, p, 0, 0, p->m_nWidth, p->m_nHeight );
		nStartX += p->m_nWidth+offset;
	}
}

void CExtLCD::DrawBattery( void )
{
	CPixmap* pmBattery = NULL;
	int xres = SubLCD_XResolution();

	if( m_nBatteryLevel == 0 ) {
		pmBattery = NULL;
	} else {
		pmBattery = m_pmBattery[m_nBatteryLevel-1];
	}

	if( pmBattery ) {
		op_BitBlt( m_pmMainFrm, xres-pmBattery->m_nWidth, 4, 
			pmBattery, 0, 0, pmBattery->m_nWidth, pmBattery->m_nHeight );
	}
}

void CExtLCD::DrawReady( void )
{
	char buf[20];
	uchar_t wbuf[20];
	CPixmap* pm=NULL;
	time_t t = time( NULL );
	struct tm* tm = localtime( &t );

	/*
	int xres = SubLCD_XResolution();
	pm = this->m_pmFullScreen;
	op_BitBlt( m_pmMainFrm, 0, 0, pm, 0, 0, pm->m_nWidth, pm->m_nHeight );

	return;
	*/

	if( TaviSysParam.etc.timeformat ) {
		pm = NULL;
		sprintf(
			buf,
			"%2d/%d   %02d:%02d ", 
			tm->tm_mon+1, tm->tm_mday, 	
			tm->tm_hour, tm->tm_min );
	}
	else {
            int hour;
		pm = tm->tm_hour < 13 ? m_pmAM : m_pmPM;

            if( tm->tm_hour == 0 ) hour = 12;
            else hour = tm->tm_hour;
		sprintf(
			buf,
			"%2d/%d   %2d:%02d ", 
			tm->tm_mon+1, tm->tm_mday, 
			hour>12?hour-12:hour, tm->tm_min
			);
	}
	str2ustr( wbuf, buf, strlen(buf) );
	int w = pT->GetStringWidth( wbuf, 12, DT_NUMBER_6WIDTH );
	char* pSubLCDBuf = SubLCD_GetPlaneBuffer( 0 );
	CPixmap pixmap;
	pixmap.CreatePixmap( w, 12, 8, NULL, true );
	pT->DrawUC16Text( wbuf, 0, 0, 1, 12, DT_NUMBER_6WIDTH, &pixmap );
	SubLCD_BitBlt( pSubLCDBuf, 2, 3, pixmap.m_pBuf, 0, 0, pixmap.m_nWidth, pixmap.m_nHeight );
	if( pm ) op_BitBlt( m_pmMainFrm, w, 4, pm, 0, 0, pm->m_nWidth, pm->m_nHeight );

	DrawBattery();
}

void CExtLCD::DrawList( void )
{
    CPixmap* pmFrontIcon = NULL;

    // draw front icon
    pmFrontIcon = this->getPixmap( m_ListItem.m_nIcon );

    if( pmFrontIcon ) {
        op_BitBlt( m_pmMainFrm, 2, 2, 
                        pmFrontIcon, 0, 0, pmFrontIcon->m_nWidth, pmFrontIcon->m_nHeight );
    }

    if( m_ListItem.m_szText.GetSize() ) {
        DrawString( m_ListItem.m_szText, TEXT_X, TEXT_Y, TEXT_WIDTH, TEXT_HEIGHT );
    }

    // draw spin 
    CPixmap* spinup = NULL;
    CPixmap* spindown = NULL;

    if( m_ListItem.m_nIndex == 0 && m_ListItem.m_nTotal > 1 ) {
    	// down
    	spindown = m_pmSpin[1];
    } else if( (m_ListItem.m_nIndex == m_ListItem.m_nTotal-1) && m_ListItem.m_nTotal > 1 ) {
    	// up
    	spinup = m_pmSpin[0];
    } else if( m_ListItem.m_nIndex && m_ListItem.m_nTotal > 1 ) {
    	spindown = m_pmSpin[1];
    	spinup = m_pmSpin[0];
    }

    int xres = SubLCD_XResolution();

    if( spindown ) {
    	op_BitBlt(
    		m_pmMainFrm, xres-spindown->m_nWidth, 4+spindown->m_nHeight,
    		spindown, 0, 0, spindown->m_nWidth, spindown->m_nHeight );
    }

    if( spinup ) {
    	op_BitBlt(
    		m_pmMainFrm, xres-spinup->m_nWidth, 4,
    		spinup, 0, 0, spinup->m_nWidth, spinup->m_nHeight );
    }
}

void CExtLCD::DrawString( CString& szText, int x1, int y1, int w, int h )
{
    // draw string: available width is 106 pixels.
    uchar_t wsz[128]; // max 127 characters.
    uchar_t* pwsz;
    int len, x;

    if( szText.IsUnicode() == false ) {
        len = ConvertUnicode( (char*)szText, szText.GetSize(), wsz, sizeof(wsz), TaviSysParam.etc.language );
        pwsz = wsz;
    } else {
        pwsz = ( uchar_t* )szText;
        len = szText.GetSize();
    }

    // create buffer
    x = pT->GetStringWidth( pwsz, 12, DT_TRANSPARENCY |DT_NUMBER_6WIDTH);
    if( m_pmBuffer ) delete m_pmBuffer;
    m_pmBuffer = new CPixmap;
    m_pmBuffer->CreatePixmap( x, 12, 8, NULL, true );
    m_pmBuffer->Fill( 0, 0, m_pmBuffer->m_nWidth, m_pmBuffer->m_nHeight, 0 );

   
    // draw text in the buffer
    x = 0;
    int i;
    for ( i=0; i<len; i++ ) {
        if( pwsz[i] == 0x20 ) {
            x += 4;
        } else {
            x += pT->DrawCharacter( pwsz[i], x, 0, 1, 12, DT_NUMBER_6WIDTH, m_pmBuffer );
//            x++;
        }
    }
   
    
    i = pT->GetBoundaryLength( pwsz, len, 12, 0, w );
    CSize size = pT->GetStringSize( pwsz, i, 12 );

    SubLCD_ClearArea( x1, y1, w, h );
    int nw = m_pmBuffer->m_nWidth > w ? w : m_pmBuffer->m_nWidth;
    op_BitBlt( 
        m_pmMainFrm, x1, y1, 
        m_pmBuffer, 0, 0, nw, m_pmBuffer->m_nHeight );
    m_nListTextWidth = size.width;
    m_nScrollCount = 0;
    m_fStartScroll = false;

    struct timeval tv;
    gettimeofday( &tv, NULL );
    m_nStartScrollTime = tv.tv_sec;
    m_nIdleCount = 0;
}

void CExtLCD::DrawPlayState( void )
{
	CPixmap* pmPlay = NULL;
	// draw play icon

	if (m_nPlayState == EXT_LCD_PLAY ) {
		if (this->GetCurrentMenu() == CExtLCD::EXT_MENU_RADIO) {
			pmPlay = m_pmIconsNew[9];			// RADIO STATION ICON #9
		} else {
			pmPlay = m_pmIconsNew[0];
		}
	} else if (m_nPlayState == EXT_LCD_PAUSE ) {
		pmPlay = m_pmIconsNew[1];
	} else if( m_nPlayState == EXT_LCD_RECORD ) {
		pmPlay = m_pmIconsNew[0];			// Playing
	} else {
		pmPlay = m_pmIconsNew[11];
	}
	
	if( pmPlay ) {
		op_BitBlt( m_pmMainFrm, 2, 2, pmPlay, 0, 0, pmPlay->m_nWidth, pmPlay->m_nHeight );
	}
}

void CExtLCD::DrawPlay( void )
{
	DrawPlayState();
	DrawString( m_szTitle, TEXT_X, TEXT_Y, TEXT_WIDTH, TEXT_HEIGHT );
	DrawBattery();
}

void CExtLCD::_DrawProgressBar( CPixmap *ico, int cur, int total, CString sz, int slen )
{
	CPixmap *p;
	int x = 0;
	int len, i;
	char buffer[10];
	uchar_t wsz[40] = { 0, };
	uchar_t buf[10];
	uchar_t* pwsz;

	int barOffsetX	= 18;
	int barOffsetY	= 7;
	int	barW		= 90;
	int	barH		= 4;

	if (slen > 2) {
		barW		-= 20;
	}


	int xres = SubLCD_XResolution();
	int yres = SubLCD_YResolution();

	SubLCD_ClearArea( 0, 0, xres, yres, 0 );

	p = ico;
	op_BitBlt( m_pmMainFrm, 2, 2, p, 0, 0, p->m_nWidth, p->m_nHeight);

	m_pmMainFrm->Fill( barOffsetX-2, barOffsetY-2, barW+4, barH+4, 0 );
	m_pmMainFrm->Fill( barOffsetX, barOffsetY+1, 1, barH-2, 1 );
	m_pmMainFrm->Fill( barOffsetX+1, barOffsetY, barW-2, barH, 1 );
	m_pmMainFrm->Fill( barOffsetX+barW-1, barOffsetY+1, 1, barH-2, 1 );

	p = m_pmBarThumb;

	int pos = cur * (barW-10) / total;	// XXX
	op_BitBlt( m_pmMainFrm, barOffsetX + pos, barOffsetY - 2, p, 0, 0, p->m_nWidth, p->m_nHeight);

	int xTextPos	= 110;
	int wText		= 20;
	if (slen > 2) {
		xTextPos	-= 20;
		wText		+= 20;
	}

	DrawString( sz, xTextPos, TEXT_Y-1, wText, TEXT_HEIGHT );

	m_pmMainFrm->Fill( 128-4, 0, 4, 16, 0 );	// XXX ?

	m_nModeTime	= gettime_sec();
}

void CExtLCD::DrawVolume( void )
{
	char buffer[10];
	uchar_t wsz[40] = { 0, };
	uchar_t buf[10];
	uchar_t* pwsz;

	int len = sprintf( buffer, "%d", m_nVolume );
	str2ustr( buf, buffer, len );
	ustrcat( wsz, buf );

	CString sz;
	sz.SetString( (char*)wsz, true );

	this->_DrawProgressBar(m_pmSpeaker, m_nVolume, 40, sz, len);
}

void CExtLCD::DrawSeek( int total, int current )
{
	char buffer[10];
	uchar_t wsz[40] = { 0, };
	uchar_t buf[10];
	uchar_t* pwsz;

	int len = sprintf( buffer, "%02d:%02d", current/60, current%60);
	str2ustr( buf, buffer, len );
	ustrcat( wsz, buf );

	CString sz;
	sz.SetString( (char*)wsz, true );

	this->_DrawProgressBar(m_pmSearch, current, total, sz, len);
}

void CExtLCD::Paint( void )
{
	int xres = SubLCD_XResolution();
	int yres = SubLCD_YResolution();

	// clear screen
	SubLCD_ClearArea( 0, 0, xres, yres, 0 );
	
	switch( m_CurrentMode ) {

	case EXT_STAGE_MENU:
		DrawMenu();
		break;

	case EXT_STAGE_LIST:
		DrawList();
		break;

	case EXT_STAGE_PLAY:
		DrawPlay();
		break;

	case EXT_STAGE_VOLUME:
		DrawVolume();
		break;

	case EXT_STAGE_SEEK:
		break;

	case EXT_STAGE_USB:
	case EXT_STAGE_MESSAGE:
		DrawMessage();
		break;

	default:
	//case EXT_STAGE_READY:
		DrawReady();
		break;


	}
}
void CExtLCD::Update( void )
{
	Clear();
	Paint();
	SubLCD_Flush( 0 );
}

void CExtLCD::Flush( void )
{
	SubLCD_Flush( 0 );
}

void CExtLCD::SetBatteryLevel( ExtLCD_Battery level )
{
	m_nBatteryLevel = level;
}

void CExtLCD::NextMenu( void )
{
	int menu = ( int )m_CurrentMenu;
	menu++;
	menu %= MENU_COUNT;
	m_CurrentMenu = ( ExtLCD_Menu )menu;
}

void CExtLCD::PrevMenu( void )
{
	int menu = ( int )m_CurrentMenu;
	menu--;
	if( menu < 0 ) menu = MENU_COUNT - 1;
	m_CurrentMenu = ( ExtLCD_Menu )menu;
}

void CExtLCD::SetListItem( const ExtLCDListItem& item )
{
	m_ListItem = item;
}

void CExtLCD::SetListItem( const CListItem* pitem, int total ) 
{
    extern CTextEngine_BDF* pT;

    if( pitem ) {
        m_ListItem.m_nIcon = (pitem->m_nType == NODE_TYPE_FOLDER) ?
                                CExtLCD::EXT_LCD_ICON_FOLDER : CExtLCD::EXT_LCD_ICON_MUSIC;
        m_ListItem.m_nIndex = pitem->m_nIdx;
        m_ListItem.m_nIcon = pitem->m_nIconIdx/2 + 102;
        m_ListItem.m_nTotal = total;
        if( pitem->m_nResID == -1 ) {
            m_ListItem.m_szText = pitem->m_szText;
        }
        else {
            m_ListItem.m_szText = pT->GetTextRes( pitem->m_nResID );
        }
    }
    else {
        m_ListItem.m_nIcon = -1;
        m_ListItem.m_nIndex = 0;
        m_ListItem.m_nTotal = 0;
        m_ListItem.m_szText = pT->GetTextRes( ML_NO_FILES );
    }
}

void CExtLCD::SetPlayTitle( const CString& szTitle )
{
	m_szTitle = szTitle;
}

void CExtLCD::SetPlayState( int nPlayState )
{
	m_nPlayState = nPlayState;
}

void CExtLCD::UpdateBattery( ExtLCD_Battery level )
{
	m_nBatteryLevel = level;

	if ( m_CurrentMode == EXT_STAGE_LIST || m_CurrentMode == EXT_STAGE_MENU ) {
		return;
	}

	DrawBattery();
	Flush();
}

void CExtLCD::UpdatePlayState( int nPlayState )
{
	m_nPlayState = nPlayState;
	if( m_CurrentMode == EXT_STAGE_PLAY ) {
		DrawPlayState();
		Flush();
	}
}

void CExtLCD::UpdateVolume( int vol )
{
	if( m_CurrentMode == EXT_STAGE_VOLUME ) {
		m_nVolume = vol;
		DrawVolume();
		Flush();
	}
}

void CExtLCD::UpdateSeek( int totaltime, int currenttime )
//void CExtLCD::UpdateSeek( char* sz, int len )
{
	if( m_CurrentMode == EXT_STAGE_SEEK ) {
		//DrawSeek( sz, len );
		DrawSeek( totaltime, currenttime );
		Flush();
	}
}

void CExtLCD::ScrollText( void )
{
	struct timeval tv;

	if( m_CurrentMode == EXT_STAGE_SEEK || m_CurrentMode == EXT_STAGE_VOLUME || m_CurrentMode == EXT_STAGE_USB ) {
		return;
	}
	
	gettimeofday( &tv, NULL );

	if( !m_fStartScroll ) {
		// wait 2 sec.
		if( abs(m_nStartScrollTime-tv.tv_sec) > 2 ) {
			m_fStartScroll = true;
			m_nLastus = tv.tv_usec;
		}
		return;
	}
	
	if( m_pmBuffer == NULL ) {
		return;
	}

	m_nIdleCount++;
	int interval;

	if ( m_nLastus > tv.tv_usec ) {
		interval = tv.tv_usec - m_nLastus + 1000000;
	} else {
		interval = tv.tv_usec - m_nLastus;
	}

	if ( interval < EXT_LCD_SCROLL_INTERVAL ) {
		return;
	}

	m_nLastus		= tv.tv_usec;
	m_nScrollCount	+= 1;
	
	if( TEXT_WIDTH < m_pmBuffer->m_nWidth ) {
		SubLCD_ClearArea( TEXT_X, TEXT_Y, TEXT_WIDTH, TEXT_HEIGHT );

		if( m_nScrollCount >= m_pmBuffer->m_nWidth ) {
			op_BitBlt( m_pmMainFrm, TEXT_X, TEXT_Y, m_pmBuffer, 0, 0, m_nListTextWidth, 12 );
			m_nScrollCount			= 0;
			m_fStartScroll			= false;
			gettimeofday( &tv, NULL );
			m_nStartScrollTime		= tv.tv_sec;
		} else {
			int w = m_pmBuffer->m_nWidth - m_nScrollCount;
			if ( w > TEXT_WIDTH ) {
				w = TEXT_WIDTH;
			}
			op_BitBlt( m_pmMainFrm, TEXT_X, TEXT_Y, m_pmBuffer, m_nScrollCount, 0, w, 12 );
		}

		SubLCD_Flush( 0 );
	}
}

void CExtLCD::ResetScroll( void )
{
	struct timeval tv;
	m_nScrollCount = 0;
	m_fStartScroll = false;
	gettimeofday( &tv, NULL );
	m_nStartScrollTime = tv.tv_sec;
}

void CExtLCD::Clear( void )
{
	m_pmMainFrm->Fill( 0, 0, m_pmMainFrm->m_nWidth, m_pmMainFrm->m_nHeight, 0 );
}

void CExtLCD::ReservedMessage( int message )
{
	m_nMsgIcon	= EXT_LCD_ICON_NEW_HELP;

	switch( message ) {

	case EXT_MSG_USB_CONNECT:
		m_nMsgIcon	= EXT_LCD_ICON_NEW_USB;
		m_szMessage = "USB CONNECTED";
		break;
	case EXT_MSG_USB_DISCONNECT:
		m_nMsgIcon	= EXT_LCD_ICON_NEW_USB;
		m_szMessage = "USB DISCONN.";
		break;
	case EXT_MSG_KEY_LOCKED:
		m_szMessage = "KEY LOCKED";
		break;
	case EXT_MSG_KEY_UNLOCKED:
		m_szMessage = "KEY UNLOCKED";
		break;
	case EXT_MSG_LOAD_MUSIC_DB:
		m_szMessage = "LOAD MUSIC DB";
		break;
	case EXT_MSG_SCAN_MUSIC_FOLDER:
		m_szMessage = "SCAN FOLDER";
		break;
	default:
		m_szMessage = "UNKNOWN MESSAGE";
		break;
	}
}

void CExtLCD::SetVolume( int vol )
{
	if( vol < 0 ) return;
	if( vol > VOLUME_RANGE ) return;

	m_nVolume = vol;
}

void CExtLCD::SetMessage( uchar_t* msg )
{
	m_szMessage = msg;
}

void CExtLCD::IdleAction(void)
{
	if (m_CurrentMode == EXT_STAGE_VOLUME || m_CurrentMode == EXT_STAGE_SEEK) {
		int curtime = gettime_sec();

		if (curtime - m_nModeTime >= 2) {
			this->ChangeMode(this->m_LastMode);
			this->Update();
		}
	}
}

/* FIN */
